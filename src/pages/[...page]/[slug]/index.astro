---
import MainGridLayout from "@/layouts/MainGridLayout.astro";
import ImageWrapper from "@/components/misc/ImageWrapper.astro";
import {Icon} from "astro-icon/components";
import PostMetadata from "@/components/PostMeta.astro";
import {i18n} from "@i18n/translation";
import I18nKey from "@i18n/i18nKey";
import {getDir, getPostUrlBySlug} from "@utils/url-utils";
import License from "@components/misc/License.astro";
import {licenseConfig} from "src/config";
import Markdown from "@components/misc/Markdown.astro";
import {profileConfig} from "@/config";
import {formatDateToYYYYMMDD} from "@/utils/date-utils";
import {getSortedPages} from "@/utils/content-utils";
import MarkdownRender from '@/components/markdown/Render.vue'

export async function getStaticPaths() {
    const blogEntries = await getSortedPages();
    return blogEntries.map(entry => ({
        params: { slug: entry.slug },
        props: { entry },
    }));
}

const { entry } = Astro.props;

const jsonLd = {
    "@context": "https://schema.org",
    "@type": "BlogPosting",
    "headline": entry.title,
    "description": entry.summary || entry.title,
    "keywords": entry.tags,
    "author": {
        "@type": "Person",
        "name": profileConfig.name,
        "url": Astro.site
    },
    "datePublished": formatDateToYYYYMMDD(entry.created),
}

const image = entry.images && entry.images.length > 0 && entry.images[0].src ? entry.images[0].src : '';

---
<MainGridLayout banner={image} title={entry.title} description={entry.summary}>
    <script slot="head" type="application/ld+json" set:html={JSON.stringify(jsonLd)}></script>
    <div class="flex w-full rounded-[var(--radius-large)] overflow-hidden relative mb-4">
        <div id="post-container" class:list={["card-base z-10 px-6 md:px-9 pt-6 pb-4 relative w-full ",
            {}
        ]}>
            <!-- word count and reading time -->
            <div class="flex flex-row text-black/30 dark:text-white/30 gap-5 mb-3 transition onload-animation">
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:notes-rounded"></Icon>
                    </div>
                    <div class="text-sm">{entry.wordCount} {" " + i18n(I18nKey.wordsCount)}</div>
                </div>
                <div class="flex flex-row items-center">
                    <div class="transition h-6 w-6 rounded-md bg-black/5 dark:bg-white/10 text-black/50 dark:text-white/50 flex items-center justify-center mr-2">
                        <Icon name="material-symbols:schedule-outline-rounded"></Icon>
                    </div>
                    <div class="text-sm">{entry.readTime} {" " + i18n(I18nKey.minutesCount)}</div>
                </div>
            </div>

            <!-- title -->
            <div class="relative onload-animation">
                <div
                    data-pagefind-body data-pagefind-weight="10" data-pagefind-meta="title"
                    class="transition w-full block font-bold mb-3
                    text-3xl md:text-[2.5rem]/[2.75rem]
                    text-black/90 dark:text-white/90
                    md:before:w-1 before:h-5 before:rounded-md before:bg-[var(--primary)]
                    before:absolute before:top-[0.75rem] before:left-[-1.125rem]
                ">
                    {entry.title}
                </div>
            </div>

            <!-- metadata -->
            <div class="onload-animation">
                <PostMetadata
                        class="mb-5"
                        published={entry.created}
                ></PostMetadata>
                {!image && <div class="border-[var(--line-divider)] border-dashed border-b-[1px] mb-5"></div>}
            </div>

            <!-- always show cover as long as it has one -->

            {image &&
                <ImageWrapper src={image} class="mb-8 rounded-xl banner-container onload-animation"/>
            }


            <Markdown class="mb-6 markdown-content onload-animation">
                <MarkdownRender content={entry.text}></MarkdownRender>
            </Markdown>

            {licenseConfig.enable && <License title={entry.title} slug={entry.slug} pubDate={entry.created} class="mb-6 rounded-xl license-container onload-animation"></License>}

        </div>
    </div>
</MainGridLayout>

<style is:global>
#post-container :nth-child(1) { animation-delay: calc(var(--content-delay) + 0ms) }
#post-container :nth-child(2) { animation-delay: calc(var(--content-delay) + 50ms) }
#post-container :nth-child(3) { animation-delay: calc(var(--content-delay) + 100ms) }
#post-container :nth-child(4) { animation-delay: calc(var(--content-delay) + 175ms) }
#post-container :nth-child(5) { animation-delay: calc(var(--content-delay) + 250ms) }
#post-container :nth-child(6) { animation-delay: calc(var(--content-delay) + 325ms) }
</style>